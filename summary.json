{
    "D:\\kj-repos\\spec-tailwind-ui\\.prettierrc.yaml": {
        "summary": "Summary:\nThe provided code does not appear to be a typical code file, but rather a configuration file for a code formatter or linter, such as Prettier or ESLint. The code specifies various formatting rules and preferences, including trailing commas, tab width, semicolon usage, single quote usage, bracket spacing, bracket position, arrow function parentheses, print width, prose wrapping, and single attribute per line.\n\nReferences:\nThis configuration file does not appear to have any imports, namespaces, or library references.",
        "timestamp": 1712091965.4879255
    },
    "D:\\kj-repos\\spec-tailwind-ui\\README.md": {
        "summary": "## Summarization\n\nThe code provided consists of three files:\n\n1. `Tailwind.config.js`: This file defines the configuration for the Tailwind CSS framework. It sets the dark mode to be used, specifies the content files to be processed, and defines the color theme using the `tailwindColors` object from the `spec-tailwind-ui` library.\n\n2. `index.css`: This file contains the global styles for the application. It imports the Tailwind CSS base, components, and utilities classes. It also sets the color scheme for the dark mode and applies a few basic styles to the HTML, body, and root elements.\n\n3. `Example.js`: This file demonstrates the usage of the `ThemeProvider` component from the `spec-tailwind-ui` library. It creates a custom theme object with various color definitions and wraps the content with the `ThemeProvider`, effectively applying the custom theme to the application.\n\n## References\n\n### Imports and Namespaces\n\n1. `Tailwind.config.js`:\n   - `import {tailwindColors} from 'spec-tailwind-ui'`\n\n2. `Example.js`:\n   - `import { ThemeProvider, COLOR } from 'spec-tailwind-ui';`\n\n### Libraries\n\n1. `spec-tailwind-ui`: This library is used to provide the `tailwindColors` object and the `ThemeProvider` component, which are utilized in the code.",
        "timestamp": 1717093468.0950677
    },
    "D:\\kj-repos\\spec-tailwind-ui\\postcss.config.js": {
        "summary": "Summary:\nThe provided code appears to be a configuration file for a build process, likely for a web application. It defines two plugins, \"tailwindcss\" and \"autoprefixer\", which are used for styling and preprocessing CSS, respectively. This configuration file is likely used by a tool like Webpack or Vite to handle the build process and apply the specified plugins.\n\nReferences:\n- No imports, namespaces, or libraries are referenced in this file.",
        "timestamp": 1720132631.655119
    },
    "D:\\kj-repos\\spec-tailwind-ui\\src\\components\\Avatar.jsx": {
        "summary": "Summary:\nThe code defines a React component called `Avatar` that displays an image or initials of a person. The component takes in several props, including `image`, `initials`, `firstName`, `lastName`, `checked`, `checkColor`, `name`, `onClick`, and `itemId`. The component renders either an image or initials, depending on whether the `checked` prop is true or false. If `checked` is false, the component displays the person's initials, with the initials displayed in a colored circle. If `checked` is true, the component displays a checkmark icon in a colored circle. The component also handles click events, allowing the parent component to perform actions based on the user's interaction with the avatar.\n\nReferences:\n- `import Icon from \"./Icon/Icon.jsx\";`\n- `const Colors = [\"red\", \"orange\", \"yellow\", \"green\", \"indigo\", \"purple\", \"fuchsia\", \"pink\"];`",
        "timestamp": 1716919000.6774333
    },
    "D:\\kj-repos\\spec-tailwind-ui\\src\\components\\ColorPicker.jsx": {
        "summary": "Summary:\n\nThe code defines a `ColorPicker` component that allows the user to select a color from a list of predefined colors. The component takes in several props, including `label`, `value`, `onChange`, `includeGrays`, and `includeColors`. The `getColors` function is used to generate the list of available colors based on the `includeGrays` and `includeColors` props. The `getItem` function is used to render a single color option, which includes a colored square and the color name. The `ColorPicker` component renders a `Menu` component with the available color options, and when a user clicks on a color, the `onChange` callback is called with the selected color.\n\nReferences:\n\nImports:\n- `{ COLOR } from '../theme/constants.js'`\n- `{ Menu, MenuItem } from './Menu/Menu.jsx'`\n\nNamespaces:\n- No namespaces used\n\nLibraries:\n- No external libraries used",
        "timestamp": 1720206081.6437986
    },
    "D:\\kj-repos\\spec-tailwind-ui\\src\\components\\Drawer.jsx": {
        "summary": "Summary:\n\nThis code defines a `Drawer` component in React that provides a sliding drawer panel. The drawer can be opened and closed by clicking or swiping the panel. The drawer is positioned absolutely on the page and covers the entire screen when open. The drawer can be set to be full-width or a fixed width. The drawer is closed when the user clicks outside the drawer or presses the Escape key.\n\nReferences:\n\n- `createPortal` from `react-dom`\n- `useEffect`, `useState` from `react`\n- `useMediaQuery` from `react-responsive`",
        "timestamp": 1721328194.271906
    },
    "D:\\kj-repos\\spec-tailwind-ui\\src\\components\\Form.jsx": {
        "summary": "Summary:\n\nThe provided code defines a React component called `Form` that manages form-related state and functionality. The `Form` component acts as a context provider, exposing a `FormContext` that can be consumed by its children components. The main functionalities of the `Form` component are:\n\n1. It maintains a state called `formErrors`, which is an object that keeps track of the number of errors associated with each form field.\n2. It provides a `setErrors` function that updates the `formErrors` state and notifies a passed `onErrorsChange` callback with the total number of errors.\n3. The `Form` component wraps its children with the `FormContext.Provider`, making the `formErrors` and `setErrors` functions available to its child components.\n\nThe code also imports the `createContext`, `useEffect`, and `useState` hooks from the `react` package, as well as the `produce` function from the `immer` library.\n\nReferences:\n\nImports:\n- `{ createContext, useEffect, useState } from 'react'`\n- `{ produce } from 'immer'`\n\nNamespaces/Libraries:\n- `React`\n- `Immer`",
        "timestamp": 1720624729.3166342
    },
    "D:\\kj-repos\\spec-tailwind-ui\\src\\components\\Icon\\Icon.jsx": {
        "summary": "Summary:\nThe code in this file defines a React component called `Icon` that renders an SVG icon based on the provided `icon` prop. The component uses the `react-icomoon` library to load the icon set from a JSON file. The component accepts various props to customize the appearance and behavior of the icon, such as size, title, disabling fill, removing inline styles, setting native mode, and providing custom SVG and path components.\n\nReferences:\n- import `iconSet` from `./icons.json`\n- import `IcoMoon` from `react-icomoon`",
        "timestamp": 1726721320.7928731
    },
    "D:\\kj-repos\\spec-tailwind-ui\\src\\components\\Menu\\Menu.jsx": {
        "summary": "Summary:\n\nThis code defines a reusable React component called `MenuComponent` that implements a dropdown menu or menu list functionality. The menu can be nested, meaning it can have sub-menus. The component uses the `@floating-ui/react` library to handle the positioning and interactions of the menu. It also supports various features such as keyboard navigation, click and hover handling, and focus management. The code also includes a `MenuItem` component that represents an individual menu item within the `MenuComponent`. The `Menu` component is a wrapper that handles the case where the menu is the top-level menu in the application.\n\nImports and References:\n\n1. Imports from `@floating-ui/react`:\n   - `autoUpdate`, `flip`, `FloatingFocusManager`, `FloatingList`, `FloatingNode`, `FloatingPortal`, `FloatingTree`, `offset`, `safePolygon`, `shift`, `useClick`, `useDismiss`, `useFloating`, `useFloatingNodeId`, `useFloatingParentNodeId`, `useFloatingTree`, `useHover`, `useInteractions`, `useListItem`, `useListNavigation`, `useMergeRefs`, `useRole`, `useTypeahead`\n2. `React` from the `react` library\n3. `Icon` component from the `../Icon/Icon.jsx` file\n4. `Button` component from the `'../controls/Button.jsx'` file\n\nNamespaces and Libraries:\n\n1. No explicit namespaces are used.\n2. The code uses the `@floating-ui/react` library for handling the floating menu functionality.",
        "timestamp": 1720205674.1114402
    },
    "D:\\kj-repos\\spec-tailwind-ui\\src\\components\\Menu\\MenuList.jsx": {
        "summary": "Summary:\n\nThis code defines a React component called `MenuList` that provides a floating menu list functionality. The component uses the `floating-ui/react` library to manage the positioning and interactions of the menu list. The menu list can be opened and closed by clicking on a reference element, and the menu items can be selected by clicking on them. The `MenuList` component also provides a context for managing the selected menu item.\n\nThe `MenuListItem` component is a child component of `MenuList` that renders a single menu item. It uses the context provided by the `MenuList` component to handle the click event of the menu item.\n\nReferences:\n\nImports:\n- `autoUpdate`, `flip`, `FloatingFocusManager`, `FloatingList`, `useClick`, `useDismiss`, `useFloating`, `useInteractions`, `useListItem`, `useRole` from `@floating-ui/react`\n- `React` from `react`\n\nNamespaces:\n- None\n\nLibraries:\n- `@floating-ui/react`\n- `react`",
        "timestamp": 1716930681.157403
    },
    "D:\\kj-repos\\spec-tailwind-ui\\src\\components\\PageSpinner.jsx": {
        "summary": "Summary:\nThe provided code defines a React component called `PageSpinner` that renders a spinner component to display a loading indicator. The component is centered on the page using Tailwind CSS utility classes.\n\nReferences:\n- The code imports the `Spinner` component from the `./Spinner` file.",
        "timestamp": 1716930672.0678499
    },
    "D:\\kj-repos\\spec-tailwind-ui\\src\\components\\SortableList\\SortableItem.jsx": {
        "summary": "Summary:\nThis code defines two React components: `SortableItem` and `DragHandle`. The `SortableItem` component is a wrapper for a list item that can be sorted using the `useSortable` hook from the `@dnd-kit/sortable` library. The `DragHandle` component is a button that can be used to drag the `SortableItem` component.\n\nThe `SortableItem` component uses the `useSortable` hook to get the necessary attributes, listeners, and references for making the list item sortable. It then renders the list item with the appropriate styles and provides the necessary context for the `DragHandle` component.\n\nThe `DragHandle` component uses the context provided by the `SortableItem` component to render a button with the necessary attributes and listeners for dragging the list item.\n\nReferences:\n- `react`: React library\n- `@dnd-kit/sortable`: Library for creating sortable components\n- `@dnd-kit/utilities`: Utility functions for the `@dnd-kit/sortable` library",
        "timestamp": 1716930757.1665294
    },
    "D:\\kj-repos\\spec-tailwind-ui\\src\\components\\SortableList\\SortableList.jsx": {
        "summary": "Summary:\n\nThis code defines a React component called `SortableList` that provides a sortable list functionality using the `dnd-kit` library. The component takes in an array of items, a callback function `onChange` to handle changes in the list order, and a `renderItem` function to render each item in the list. The component uses the `DndContext` from `dnd-kit/core` to enable drag-and-drop functionality, and the `SortableContext` from `dnd-kit/sortable` to manage the sorting of the items. When an item is dragged and dropped, the `onChange` callback is called with the updated list of items.\n\nReferences:\n\nImports:\n- `React`, `useMemo`, `useState` from \"react\"\n- `DndContext`, `KeyboardSensor`, `PointerSensor`, `useSensor`, `useSensors` from \"@dnd-kit/core\"\n- `SortableContext`, `arrayMove`, `sortableKeyboardCoordinates` from \"@dnd-kit/sortable\"\n- `SortableOverlay` from \"./SortableOverlay\"\n- `DragHandle`, `SortableItem` from \"./SortableItem\"\n\nNamespaces:\n- None\n\nLibraries:\n- `@dnd-kit/core`\n- `@dnd-kit/sortable`",
        "timestamp": 1716919305.4229574
    },
    "D:\\kj-repos\\spec-tailwind-ui\\src\\components\\SortableList\\SortableOverlay.jsx": {
        "summary": "Summary:\nThis code defines a React component called `SortableOverlay` that wraps a `DragOverlay` component from the `@dnd-kit/core` library. The `DragOverlay` component is used to provide a visual overlay for dragged items during a drag-and-drop operation. The code sets up a custom `dropAnimationConfig` object that defines the side effects and styles to be applied during the drop animation.\n\nReferences:\n- `DragOverlay`, `defaultDropAnimationSideEffects` from `@dnd-kit/core`",
        "timestamp": 1716919375.618212
    },
    "D:\\kj-repos\\spec-tailwind-ui\\src\\components\\Spinner.jsx": {
        "summary": "Summary:\n\nThe code defines a React functional component called `Spinner` that renders an SVG spinner animation. The spinner is styled with CSS classes that change its appearance based on the dark mode state of the application. The spinner is designed to be used as a loading indicator in the application.\n\nReferences:\n\nImports:\n- No imports are used in this file.\n\nNamespaces:\n- No namespaces are used in this file.\n\nLibraries:\n- The code uses the `React` library to define a functional component.\n- The code uses the `SVG` namespace from the `http://www.w3.org/2000/svg` XML namespace to define the spinner SVG.",
        "timestamp": 1716930666.7958698
    },
    "D:\\kj-repos\\spec-tailwind-ui\\src\\components\\Tabs\\TabContainer.jsx": {
        "summary": "Summary:\n\nThe code defines two React components: `TabContainer` and `TabPanel`. The `TabContainer` component is responsible for rendering a set of tabs and managing the selected tab. It uses the `Tabs` and `Tab` components from the `./Tabs` module, the `Select` component from the `../controls/Select` module, and the `useMediaQuery` hook from the `react-responsive` library.\n\nThe `TabContainer` component checks the screen size using `useMediaQuery` and renders either a dropdown select or a tab-based interface, depending on the screen size. It also handles the case where the tab container should automatically scroll when the content exceeds the available height.\n\nThe `TabPanel` component is a simple wrapper around a tab panel, providing a consistent layout and handling the visibility of the tab title based on the screen size.\n\nReferences:\n\nImports:\n- `React` from 'react'\n- `Tabs`, `Tab` from './Tabs'\n- `Select` from '../controls/Select'\n- `useMediaQuery` from 'react-responsive'\n\nNamespaces:\n- No namespaces used\n\nLibraries:\n- `react`\n- `react-responsive`",
        "timestamp": 1720408230.608089
    },
    "D:\\kj-repos\\spec-tailwind-ui\\src\\components\\Tabs\\Tabs.jsx": {
        "summary": "Summary:\n\nThis code defines two React components, `Tabs` and `Tab`, that can be used to create a tabbed interface. The `Tabs` component serves as a container for the individual tab components and manages the currently selected tab. The `Tab` component represents a single tab and handles the styling and click event for the tab.\n\nThe `Tabs` component takes in three props:\n\n1. `children`: The tab components to be displayed.\n2. `onChange`: A function that is called when a tab is clicked, with the selected tab value as the argument.\n3. `selected`: The value of the currently selected tab.\n\nThe `Tab` component takes in four props:\n\n1. `children`: The content to be displayed within the tab.\n2. `value`: The value associated with the tab.\n3. `selected`: The value of the currently selected tab.\n4. `onClick`: A function that is called when the tab is clicked, with the tab value as the argument.\n\nThe code uses conditional styling to apply different CSS classes to the tab based on whether it is the currently selected tab or not.\n\nReferences:\n\nImports:\n- `React` from 'react'\n\nNamespaces:\n- None\n\nLibraries:\n- `React`",
        "timestamp": 1720408220.359163
    },
    "D:\\kj-repos\\spec-tailwind-ui\\src\\components\\ThemePicker.jsx": {
        "summary": "Summary:\nThis code defines a React component called `ThemePicker` that allows the user to customize the colors of a theme. The component takes in a `theme` object and an `onChange` function as props. It renders a grid of `ColorPicker` components, each of which allows the user to select a color for a specific theme property (primary, secondary, tertiary, danger, warning, success, and background). When the user changes a color, the `onChange` function is called with the property name and the new color value.\n\nReferences:\n- `ColorPicker.jsx`: This is the file that contains the `ColorPicker` component, which is imported and used in the `ThemePicker` component.\n- No other imports, namespaces, or libraries are referenced in this file.",
        "timestamp": 1720205620.4583938
    },
    "D:\\kj-repos\\spec-tailwind-ui\\src\\components\\ThemeProvider.jsx": {
        "summary": "Summary:\n\nThis code defines a React component called `ThemeProvider` that manages the theme of a web application. The component provides a context that can be used by other components to access the current theme, toggle the dark mode, and display alert and confirmation modals.\n\nThe `ThemeProvider` component takes in several props, including `lightTheme`, `darkTheme`, `darkColors`, and `lightColors`, which are used to define the theme styles. The component uses the `useAtom` hook from the `jotai` library to access the `alertModalAtom` and `confirmModalAtom` atoms, which are used to control the display of the alert and confirmation modals.\n\nThe component also defines a `getLocalDarkMode` function that checks the user's local storage and system preferences to determine the initial dark mode setting. The `setLocalDarkMode` function is used to update the user's local storage with the current dark mode setting.\n\nThe `toggleDarkMode` function is used to switch between the light and dark modes, and the `useEffect` hook is used to update the page theme whenever the dark mode setting changes.\n\nReferences:\n\nImports:\n- `AlertModal` from `./modals/AlertModal.jsx`\n- `ConfirmModal` from `./modals/ConfirmModal.jsx`\n- `useAtom` from `jotai`\n- `alertModalAtom`, `closeAlert`, `confirmModalAtom` from `../stores/themeStore.js`\n- `createContext`, `useEffect`, `useState` from `react`\n- `setPageTheme` from `../theme/theme.js`\n\nNamespaces/Libraries:\n- `jotai`\n- `react`",
        "timestamp": 1726599930.1574328
    },
    "D:\\kj-repos\\spec-tailwind-ui\\src\\components\\ToolTip.jsx": {
        "summary": "Summary:\nThe code in this file implements a custom tooltip component using the `@floating-ui/react` library. The `useTooltip` hook provides a way to create a tooltip with various positioning options and interactions, such as hover, focus, and dismiss. The `TooltipContext` and `useTooltipContext` hooks are used to provide the tooltip state and functionality to child components. The `ToolTip` component is the main wrapper for the tooltip, and the `TooltipTrigger` and `TooltipContent` components are used to render the trigger and content of the tooltip, respectively.\n\nReferences:\n- Imports:\n  - `React` from `'react'`\n  - `*` from `'@floating-ui/react'`\n- Namespaces:\n  - None\n- Libraries:\n  - `@floating-ui/react`",
        "timestamp": 1716930829.9463384
    },
    "D:\\kj-repos\\spec-tailwind-ui\\src\\components\\TreeView\\TreeView.jsx": {
        "summary": "Summary:\nThis code implements a TreeView component in React. The component takes in a node object, which represents the root of the tree, and an optional `getItemFn` function that can be used to customize the rendering of each node in the tree. The component recursively renders the tree structure, with each node being displayed as a collapsible element. If a node has child nodes, they are displayed as a nested unordered list.\n\nReferences:\n- `React` - The main React library is imported.\n- `./TreeView.css` - A CSS file is imported for styling the TreeView component.",
        "timestamp": 1694659119.0817387
    },
    "D:\\kj-repos\\spec-tailwind-ui\\src\\components\\centerSelect\\CenterSelect.jsx": {
        "summary": "Summary:\n\nThis code implements a custom select component called \"CenterSelect\" that provides a dropdown-like UI with a centered selected item. The component uses the `useFloating` hook from the `@floating-ui/react` library to handle the positioning and interaction of the dropdown. It also utilizes various other hooks from the same library to handle click, dismiss, role, inner offset, list navigation, and typeahead functionality. The component renders a dropdown menu with a list of items, and the user can navigate through the list using keyboard or mouse interactions. The component also includes custom scroll arrows to handle scrolling within the dropdown menu. Overall, this code provides a reusable and feature-rich select component for a React-based application.\n\nReferences:\n\nImports:\n- `useFloating`, `flip`, `size`, `autoUpdate`, `useInteractions`, `inner`, `useInnerOffset`, `useClick`, `useListNavigation`, `useDismiss`, `useRole`, `useTypeahead`, `FloatingFocusManager`, `FloatingOverlay`, `FloatingPortal`, `offset`, `shift` from `@floating-ui/react`\n- `useEffect`, `useRef`, `useState` from `react`\n- `flushSync` from `react-dom`\n- `ScrollArrow` from `./ScrollArrow`\n- `BaseInput` from `../controls/BaseInput.jsx`\n\nNamespaces/Libraries:\n- `@floating-ui/react`\n- `react`\n- `react-dom`",
        "timestamp": 1720200439.9452462
    },
    "D:\\kj-repos\\spec-tailwind-ui\\src\\components\\centerSelect\\ScrollArrow.jsx": {
        "summary": "Summary:\n\nThis code defines a React component called `ScrollArrow` that displays a scrolling arrow at the top or bottom of a container element. The component uses the `useLayoutEffect` hook to update the visibility of the arrow based on the container's scroll position. If the container is scrolled to the top or bottom, the arrow will be displayed; otherwise, it will be hidden.\n\nThe component also includes event handlers for pointer events (e.g., touch events) that allow the user to scroll the container by pressing and holding the arrow. The `handlePointerEnter` function starts a continuous scrolling animation, and the `handlePointerLeave` function stops the animation.\n\nReferences:\n\n- Imported from React:\n  - `useLayoutEffect`\n  - `useRef`\n  - `useState`\n- Imported from `react-dom`:\n  - `flushSync`",
        "timestamp": 1720200439.9522796
    },
    "D:\\kj-repos\\spec-tailwind-ui\\src\\components\\controls\\BaseInput.jsx": {
        "summary": "Summary:\n\nThis code defines a React functional component called `BaseInput` that provides a reusable input field with features such as validation, error handling, and visual styling based on the input state (danger, warning, success). The component uses the `FormContext` provided by a parent `Form` component to manage form-level errors. It also includes support for tooltips, labels, and description text.\n\nThe component handles user input changes, updating the input state, and providing appropriate visual cues and error messages based on the input value and any validation messages passed to the component. It also manages the unique `id` of the input field to ensure consistency.\n\nReferences:\n\nImports:\n- `React`, `useContext`, `useEffect`, `useState` from 'react'\n- `ToolTip`, `TooltipContent`, `TooltipTrigger` from '../ToolTip.jsx'\n- `Icon` from '../Icon/Icon.jsx'\n- `FormContext` from '../Form.jsx'\n\nNamespaces/Libraries:\nNo explicit namespaces or libraries are referenced in the code.",
        "timestamp": 1721583581.6080673
    },
    "D:\\kj-repos\\spec-tailwind-ui\\src\\components\\controls\\Button.jsx": {
        "summary": "Summary:\n\nThis code defines a React functional component called `Button` that represents a customizable button element. The button can have different styles, colors, and behaviors based on the props passed to the component. The component uses several helper functions to dynamically generate the CSS classes for the button based on the provided props, such as `color`, `outline`, `link`, and `loading`. The component also includes a `Loading` sub-component that displays a loading spinner and text when the `loading` prop is true.\n\nImports and References:\n\n1. `forwardRef` from `'react'`\n2. `COLOR` and `COLOR_TYPE` from `'../../theme/constants.js'`\n\nNo other imports, namespaces, or libraries are referenced in this code file.",
        "timestamp": 1726545612.8030732
    },
    "D:\\kj-repos\\spec-tailwind-ui\\src\\components\\controls\\CheckBox.jsx": {
        "summary": "Summary:\nThe provided code defines a React component called `CheckBox` that renders a checkbox input element with customizable styles and behavior. The component takes in several props such as `children`, `isStacked`, `color`, `value`, and `onChange`. It also defines a `CheckboxGroup` component that can be used to group multiple `CheckBox` components together, and a `ConditionalWrapper` component that conditionally wraps its children in a `div` or a `React.Fragment` depending on the `condition` prop.\n\nReferences:\n- `React` is imported from the `react` module.",
        "timestamp": 1716930626.6334453
    },
    "D:\\kj-repos\\spec-tailwind-ui\\src\\components\\controls\\DateInput.jsx": {
        "summary": "Summary:\nThe code defines a React component called `DateInput` that wraps the `BaseInput` component to provide a date input field. The `DateInput` component accepts various props such as `className`, `value`, `name`, `onChange`, `label`, `description`, and `messages`. The component renders an `input` element of type \"date\" and passes the necessary props to the `BaseInput` component.\n\nReferences:\n- `forwardRef` from 'react'\n- `BaseInput` from './BaseInput'",
        "timestamp": 1716930603.0178201
    },
    "D:\\kj-repos\\spec-tailwind-ui\\src\\components\\controls\\EmailInput.jsx": {
        "summary": "Summary:\n\nThis code defines a React component called `EmailInput` that extends the `BaseInput` component. The `EmailInput` component is designed to handle user input for an email address. It includes functionality to validate the email address input and display error messages if the input is invalid. The component uses the `useState` hook to manage the state of the error messages, and the `forwardRef` function to allow the component to be used with a ref. The `handleChange` function is used to update the component's state and trigger the email validation when the user types into the input field.\n\nReferences:\n\n- Imports:\n  - `forwardRef` and `useState` from 'react'\n  - `BaseInput` from './BaseInput'\n\nNo namespaces or libraries are explicitly referenced in this code.",
        "timestamp": 1716930584.023978
    },
    "D:\\kj-repos\\spec-tailwind-ui\\src\\components\\controls\\ItemPicker.jsx": {
        "summary": "Summary:\n\nThe provided code implements an ItemPicker component for a React application. This component provides a dropdown-like functionality that allows users to select an item from a list of options. The component supports features such as searching and filtering the list of items, keyboard navigation, and automatic positioning of the dropdown menu. The component uses the `@floating-ui/react` library to handle the positioning and interactions of the dropdown menu.\n\nThe component takes in several props, including `pickerItems` (the list of items to display), `value` (the currently selected item), `onQueryChange` and `onChange` (callback functions for handling changes in the search query and selected item), and various other props for customizing the appearance and behavior of the component.\n\nReferences:\n\nImports:\n- `React`, `forwardRef`, `useEffect`, `useRef`, `useState` from \"react\"\n- Various functions and hooks from \"@floating-ui/react\"\n- `BaseInput` from \"./BaseInput.jsx\"\n- `Spinner` from \"../Spinner.jsx\"\n\nNamespaces:\n- None\n\nLibraries:\n- `@floating-ui/react`",
        "timestamp": 1716918767.624213
    },
    "D:\\kj-repos\\spec-tailwind-ui\\src\\components\\controls\\Label.jsx": {
        "summary": "Summary:\nThe provided code defines a React functional component called `Label`. This component is a reusable label element that can be used in a user interface. The component takes three props: `className`, `htmlFor`, and `children`. It renders a `<label>` element with the provided class name and `htmlFor` attribute, and displays the `children` passed to it.\n\nReferences:\n- None\n\nThis code file does not contain any imports, namespaces, or external libraries. It only defines a simple React component.",
        "timestamp": 1716930565.4167936
    },
    "D:\\kj-repos\\spec-tailwind-ui\\src\\components\\controls\\NumberInput.jsx": {
        "summary": "Summary:\n\nThe provided code implements a `NumberInput` component that extends the `BaseInput` component. This component is designed to handle number input fields in a React application. It provides functionality to validate the input value based on minimum and maximum constraints, and supports decimal values if specified. The component also displays error messages if the input value violates the defined constraints.\n\nReferences:\n\nImports:\n- `forwardRef` and `useState` from 'react'\n- `BaseInput` from './BaseInput'\n\nNamespaces/Libraries:\n- None specified",
        "timestamp": 1721670718.3811152
    },
    "D:\\kj-repos\\spec-tailwind-ui\\src\\components\\controls\\PasswordInput.jsx": {
        "summary": "Summary:\n\nThe provided code defines a React component called `PasswordInput` that extends the `BaseInput` component. This component is used to create a password input field with additional features such as a label, description, and error messages. The component forwards the `ref` prop to the underlying `input` element, allowing for direct access to the input field.\n\nReferences:\n\nImports:\n- `forwardRef` from 'react'\n- `BaseInput` from './BaseInput'\n\nNamespaces/Libraries:\n- None",
        "timestamp": 1716930560.0873926
    },
    "D:\\kj-repos\\spec-tailwind-ui\\src\\components\\controls\\PhoneInput.jsx": {
        "summary": "Summary:\n\nThis code defines a React component called `PhoneInput` that provides a phone number input field with validation and formatting functionality. The component uses the `libphonenumber-js` library to validate and format the phone number input. It displays appropriate messages based on the validity of the phone number, such as \"Invalid phone number\", \"This phone number may be invalid\", or \"This phone number is valid\". The component also includes a `BaseInput` component that provides the overall structure and styling for the input field.\n\nReferences:\n\nImports:\n- `forwardRef`, `useState` from 'react'\n- `BaseInput` from './BaseInput'\n- `parsePhoneNumber` from 'libphonenumber-js'\n\nNamespaces:\n- None\n\nLibraries:\n- `react`\n- `libphonenumber-js`",
        "timestamp": 1716930556.3568869
    },
    "D:\\kj-repos\\spec-tailwind-ui\\src\\components\\controls\\Radio.jsx": {
        "summary": "Summary:\n\nThe code defines a `Radio` component and a `RadioGroup` component using React. The `Radio` component renders a radio button input with a label, and the `RadioGroup` component renders a group of `Radio` components with a label and an optional description. The `RadioGroup` component also handles the mapping of children to the `Radio` components, ensuring that they have the correct props such as `isStacked`, `groupName`, and `onChange`.\n\nThe code also includes a `ConditionalWrapper` component that conditionally wraps its children with a `div` element if the `condition` prop is true, or leaves the children unwrapped if the condition is false.\n\nReferences:\n\nImports:\n- `React` from 'react'\n- `ToolTip`, `TooltipContent`, `TooltipTrigger` from '../ToolTip.jsx'\n- `Icon` from \"../Icon/Icon.jsx\"\n\nNamespaces:\n- None\n\nLibraries:\n- React",
        "timestamp": 1716918612.993146
    },
    "D:\\kj-repos\\spec-tailwind-ui\\src\\components\\controls\\Select.jsx": {
        "summary": "Summary:\nThe provided code defines a React component called `Select` that renders a select input field with a label, description, and validation messages. The component is a wrapper around the `BaseInput` component, which provides the base functionality for the input field. The `Select` component allows for the customization of various properties such as `id`, `className`, `name`, `value`, `onChange`, `label`, `description`, and `messages`. It also accepts child elements, which are rendered within the `select` element.\n\nReferences:\n- `import { forwardRef } from 'react';`\n- `import BaseInput from './BaseInput';`",
        "timestamp": 1721341673.5295932
    },
    "D:\\kj-repos\\spec-tailwind-ui\\src\\components\\controls\\TextArea.jsx": {
        "summary": "Summary:\n\nThe code defines a React functional component called `TextArea` that provides a textarea input field with additional functionality. The component uses the `forwardRef` and other React hooks such as `useCallback`, `useEffect`, and `useRef` to manage the internal state and behavior of the textarea.\n\nThe key features of the `TextArea` component are:\n\n1. **Auto-grow**: The textarea can automatically adjust its height to fit the content, up to a maximum height specified by the `maxHeight` prop.\n2. **Ref handling**: The component uses a combination of the `ref` passed in as a prop and an internal `innerRef` to manage the textarea element.\n3. **Event handling**: The `handleChange` function is called whenever the textarea value changes, and it updates the height of the textarea accordingly.\n4. **Styling**: The component uses the `BaseInput` component to render the textarea and handle the styling and layout.\n\nReferences:\n\nImports:\n- `{forwardRef, useCallback, useEffect, useRef}` from 'react'\n- `BaseInput` from './BaseInput'\n\nNamespaces/Libraries:\n- None",
        "timestamp": 1725306888.5093296
    },
    "D:\\kj-repos\\spec-tailwind-ui\\src\\components\\controls\\TextInput.jsx": {
        "summary": "Summary:\n\nThe code defines a React functional component called `TextInput` that extends the `BaseInput` component. The `TextInput` component renders an input field of type \"text\" with a placeholder, label, description, and messages. The component also accepts additional props that are passed down to the `BaseInput` component.\n\nReferences:\n\nImports:\n- `forwardRef` from 'react'\n- `BaseInput` from './BaseInput'\n\nNamespaces/Libraries:\n- None",
        "timestamp": 1716930452.0207214
    },
    "D:\\kj-repos\\spec-tailwind-ui\\src\\components\\controls\\TimeInput.jsx": {
        "summary": "Summary:\nThe code defines a React component called `TimeInput` that wraps a basic input field with a type of \"time\". The component accepts various props such as `className`, `name`, `onChange`, `value`, `label`, `description`, and `messages`, which are passed down to the `BaseInput` component. The `TimeInput` component is exported as the default export.\n\nReferences:\n- `forwardRef` from \"react\"\n- `BaseInput` from \"./BaseInput\"",
        "timestamp": 1716930476.2676227
    },
    "D:\\kj-repos\\spec-tailwind-ui\\src\\components\\controls\\Toggle.jsx": {
        "summary": "Summary:\nThis code defines a React component called `Toggle` that renders a toggle switch. The toggle switch can be customized with different colors and can be used to toggle a value. The component takes in several props, such as `id`, `color`, `onChange`, `value`, `label`, and `labelRight`, and uses them to render the toggle switch. The `getColorClasses()` function is used to set the appropriate CSS classes for the toggle switch based on the selected color.\n\nReferences:\n- `COLOR` and `COLOR_TYPE` are imported from '../../theme/constants.js'",
        "timestamp": 1726545637.223892
    },
    "D:\\kj-repos\\spec-tailwind-ui\\src\\components\\controls\\UrlInput.jsx": {
        "summary": "Summary:\n\nThis code defines a React component called `UrlInput` that is used to input a URL. The component has the following features:\n\n1. It uses the `BaseInput` component as a base and adds additional functionality for URL validation.\n2. It checks if the input URL is valid using regular expressions, and if the URL is not secure (does not start with `https://`) and the `requireSecure` prop is true, it adds an error message.\n3. It updates the `innerMessages` state with the validation results and passes them to the `BaseInput` component.\n4. The `handleChange` function is called when the input value changes, and it performs the URL validation logic.\n\nReferences:\n\nImports:\n- `forwardRef` and `useState` from 'react'\n- `BaseInput` from './BaseInput'\n\nNamespaces/Libraries:\n- React",
        "timestamp": 1716930533.1538303
    },
    "D:\\kj-repos\\spec-tailwind-ui\\src\\components\\index.js": {
        "summary": "Summary:\nThis code exports a collection of reusable React UI components, including various input controls (TextInput, NumberInput, DateInput, etc.), form-related components (Form, FormContext), navigation components (Menu, Tab, Tabs), and modal components (AlertModal, ConfirmModal, DeleteModal). These components can be used in a larger application to provide consistent and comprehensive UI functionality.\n\nReferences:\n- No imports or namespaces are referenced in this file. It appears to be a pure export of components.\n- The code references the following libraries/modules:\n  - ./controls/BaseInput.jsx\n  - ./controls/Button.jsx\n  - ./controls/CheckBox.jsx\n  - ./controls/DateInput.jsx\n  - ./controls/EmailInput.jsx\n  - ./controls/ItemPicker.jsx\n  - ./controls/Label.jsx\n  - ./controls/NumberInput.jsx\n  - ./controls/PasswordInput.jsx\n  - ./controls/PhoneInput.jsx\n  - ./controls/Radio.jsx\n  - ./controls/Select.jsx\n  - ./controls/TextArea.jsx\n  - ./controls/TextInput.jsx\n  - ./controls/TimeInput.jsx\n  - ./controls/Toggle.jsx\n  - ./controls/UrlInput.jsx\n  - ./Form.jsx\n  - ./centerSelect/CenterSelect.jsx\n  - ./ColorPicker.jsx\n  - ./Icon/Icon.jsx\n  - ./Menu/Menu.jsx\n  - ./Menu/MenuList.jsx\n  - ./SortableList/SortableList.jsx\n  - ./SortableList/SortableItem.jsx\n  - ./SortableList/SortableOverlay.jsx\n  - ./Tabs/Tabs.jsx\n  - ./Tabs/TabContainer.jsx\n  - ./Avatar.jsx\n  - ./PageSpinner.jsx\n  - ./Spinner.jsx\n  - ./ToolTip.jsx\n  - ./ThemeProvider.jsx\n  - ./modals/AlertModal.jsx\n  - ./modals/BaseModal.jsx\n  - ./modals/ConfirmModal.jsx\n  - ./modals/DeleteModal.jsx\n  - ./Drawer.jsx",
        "timestamp": 1721328221.1822302
    },
    "D:\\kj-repos\\spec-tailwind-ui\\src\\components\\modals\\AlertModal.jsx": {
        "summary": "Summary:\n\nThis code defines a React functional component called `AlertModal` that represents a modal dialog with an alert message. The modal can be used to display important information or warnings to the user. The component accepts several props that control the appearance and behavior of the modal, such as whether it is open, the title, the button text and color, the icon to display, and the content to be shown inside the modal. The component renders a `BaseModal` component and passes the appropriate props to it, including the buttons to be displayed in the modal.\n\nReferences:\n\nImports:\n- `BaseModal` from `'./BaseModal.jsx'`\n- `Button` from `'../controls/Button.jsx'`\n\nNo namespaces or libraries are referenced in this file.",
        "timestamp": 1717006712.220571
    },
    "D:\\kj-repos\\spec-tailwind-ui\\src\\components\\modals\\BaseModal.jsx": {
        "summary": "Summary:\n\nThis code defines a reusable React component called `BaseModal` that provides a modal dialog functionality. The modal can be used to display content with a title, icon, and optional buttons. The modal is positioned as a fixed element on the page, with a backdrop that blurs the content behind it. The modal can be closed by clicking outside of it or by pressing the Escape key.\n\nReferences:\n\nImports:\n- `useEffect` from `react`\n- `createPortal` from `react-dom`\n- `Icon` from `../Icon/Icon.jsx`\n\nNamespaces/Libraries:\n- React\n- React DOM",
        "timestamp": 1717437396.7328079
    },
    "D:\\kj-repos\\spec-tailwind-ui\\src\\components\\modals\\ConfirmModal.jsx": {
        "summary": "Summary:\nThe code defines a React component called `ConfirmModal` that displays a modal dialog with a confirmation message. The modal can have a title, an icon, and two buttons: one for confirming the action and one for canceling it. The component allows for customization of the text, colors, and styles of the modal and its buttons.\n\nReferences:\n- `Button` component from `../controls/Button.jsx`\n- `BaseModal` component from `./BaseModal.jsx`\n- `useState` hook from React (`import { useState } from 'react';`)",
        "timestamp": 1721340062.9938698
    },
    "D:\\kj-repos\\spec-tailwind-ui\\src\\components\\modals\\DeleteModal.jsx": {
        "summary": "Summary:\n\nThis code defines a React component called `ConfirmModal` that represents a confirmation modal dialog. The modal can be used to display a message and get user confirmation for an action, such as deleting an item. The component accepts several props to customize the appearance and behavior of the modal, such as the title, button text and colors, loading state, and container styles.\n\nThe `ConfirmModal` component uses the `BaseModal` component to render the actual modal dialog, and it includes two buttons: one for confirming the action and one for canceling it. The component also manages a loading state using the `useState` hook.\n\nReferences:\n\nImports:\n- `useState` from 'react'\n- `Button` from '../controls/Button.jsx'\n- `BaseModal` from './BaseModal.jsx'\n\nNamespaces/Libraries:\n- None",
        "timestamp": 1721340029.874324
    },
    "D:\\kj-repos\\spec-tailwind-ui\\src\\index.js": {
        "summary": "Summary:\n\nThis code file is a collection of exports, including components, themes, colors, and color-related utility functions. It sets up the default theme, allows for theme storage and retrieval, and provides a set of functions for manipulating and working with colors in different color spaces (RGB, HSL, hexadecimal).\n\nReferences:\n\n1. Imports:\n   - `./index.css`: CSS file for the project\n   - `./components`: Exports all components from the components folder\n   - `./theme/theme.js`: Exports theme-related functions\n   - `./theme/tailwindColors.js`: Exports Tailwind CSS color palette\n   - `./theme/constants.js`: Exports color-related constants\n   - `./theme/colors.js`: Exports a default color palette\n   - `./theme/colorUtils.js`: Exports a set of color utility functions\n   - `./stores/themeStore.js`: Exports theme-related store functions\n\n2. Namespaces/Libraries:\n   - No explicit namespaces or libraries referenced in the code.",
        "timestamp": 1720133592.4958575
    },
    "D:\\kj-repos\\spec-tailwind-ui\\src\\stores\\themeStore.js": {
        "summary": "Summary:\n\nThis code defines two state management modules for displaying alerts and confirmation modals in a React application. The first module, `alertModalStore` and `alertModalAtom`, manages the state of an alert modal, including the message, title, button text, and icon. The `showAlert` and `closeAlert` functions are provided to control the display of the alert modal.\n\nThe second module, `confirmModalStore` and `confirmModalAtom`, manages the state of a confirmation modal, including the message, title, and icon. The `showConfirm` and `closeConfirm` functions are provided to control the display of the confirmation modal.\n\nThe code uses the `jotai-zustand` library to create the state management stores and atoms, which can be used in a React application.\n\nReferences:\n\nImports:\n- `atomWithStore` from `jotai-zustand`\n- `createStore` from `zustand/vanilla`\n- `atom` from `jotai`\n\nNamespaces:\n- None\n\nLibraries:\n- `jotai-zustand`\n- `zustand/vanilla`\n- `jotai`",
        "timestamp": 1720624314.843189
    },
    "D:\\kj-repos\\spec-tailwind-ui\\src\\theme\\colorUtils.js": {
        "summary": "Summary:\nThis code file contains a set of utility functions for working with color formats, specifically hex, RGB, and HSL. The functions include:\n- `hexPart`: Converts a number to a 2-digit hexadecimal string\n- `hexToRgb`: Converts a hexadecimal color code to an RGB object\n- `rgbToHex`: Converts an RGB object to a hexadecimal color code\n- `luminance`: Calculates the luminance of an RGB color\n- `rgbContrast`: Calculates the contrast ratio between two RGB colors\n- `isRgbContrastBlack`: Checks if an RGB color has sufficient contrast against black\n- `isHslContrastBlack`: Checks if an HSL color has sufficient contrast against black\n- `hslTextToObject`: Converts an HSL string to an HSL object\n- `hslContrast`: Calculates the contrast ratio between two HSL colors\n- `hexToHsl`: Converts a hexadecimal color code to an HSL object\n- `hslToHex`: Converts an HSL object to a hexadecimal color code\n- `toHSLObject`: Converts an HSL string to an HSL object\n- `hslToRgb`: Converts an HSL object to an RGB object\n- `rgbToHsl`: Converts an RGB object to an HSL object\n\nReferences:\nThe code does not import any modules, namespaces, or libraries.",
        "timestamp": 1706626374.299694
    },
    "D:\\kj-repos\\spec-tailwind-ui\\src\\theme\\colors.js": {
        "summary": "Summary:\nThis code defines an object called `colors` that contains a set of color palettes. Each color palette has a range of shades, from 50 to 950, with corresponding HSL (Hue, Saturation, Lightness) values. The color palettes include common color names such as coffee, stone, slate, moss, zinc, neutral, red, orange, amber, yellow, lime, green, emerald, teal, cyan, sky, blue, indigo, violet, purple, fuchsia, pink, and rose.\n\nReferences:\n- No imports, namespaces, or libraries are referenced in this file.",
        "timestamp": 1720562189.3224854
    },
    "D:\\kj-repos\\spec-tailwind-ui\\src\\theme\\constants.js": {
        "summary": "Summary:\n\nThis code defines two objects, `COLOR_TYPE` and `COLOR`, which appear to be lists of color names and types. The `COLOR_TYPE` object defines a set of color types, such as \"primary\", \"secondary\", \"danger\", etc. The `COLOR` object defines a set of specific color names, such as \"coffee\", \"neutral\", \"red\", \"blue\", etc.\n\nThis code does not appear to have any functional logic. It seems to be more of a configuration or utility file that provides a centralized location for defining color-related constants that can be used elsewhere in the project.\n\nReferences:\n\nThis code file does not contain any imports, namespaces, or external libraries. It is a self-contained set of color-related constants.",
        "timestamp": 1720206081.6836288
    },
    "D:\\kj-repos\\spec-tailwind-ui\\src\\theme\\tailwindColors.js": {
        "summary": "Summary:\n\nThis code defines a JavaScript object called `tailwindColors` that contains a comprehensive set of color definitions for various hues and shades, following the color palette used in the Tailwind CSS framework. The object includes a wide range of colors, from basic shades of black, white, and gray, to more vibrant hues like red, green, blue, and their various tints and shades. The object also includes some special color categories like \"primary\", \"secondary\", \"tertiary\", \"danger\", \"warn\", and \"success\", along with their respective text colors.\n\nEach color is defined as a nested object, where the key is the color name and the value is a set of HSL color values for different shades of that color (e.g., '50', '100', '200', etc.). The use of HSL (Hue, Saturation, Lightness) color values allows for more control and flexibility in defining and working with colors.\n\nThis color palette can be used in a web application or user interface to consistently apply styles and branding across different components and elements.\n\nReferences:\n\nThe code does not appear to import any external modules, namespaces, or libraries. It is a self-contained JavaScript object definition.",
        "timestamp": 1720619063.623621
    },
    "D:\\kj-repos\\spec-tailwind-ui\\src\\theme\\theme.js": {
        "summary": "Summary:\nThis code appears to be a utility module that provides functions for managing the theme and color scheme of a web application. The main functionality includes:\n\n1. Setting the theme type (primary, secondary, tertiary, danger, warn, success, and background) based on a provided color and a set of custom colors.\n2. Retrieving and setting the theme from/to the browser's local storage.\n3. Providing a default theme object with predefined color values.\n4. Utility functions for converting HSL color values to JavaScript objects and setting CSS variables for the theme colors.\n\nReferences:\n- `isHslContrastBlack` function from `./colorUtils`\n- `colors` object from `./colors`\n- `COLOR` and `COLOR_TYPE` constants from `./constants.js`\n- `JSON` for parsing and stringifying theme data\n- No other imports or namespaces are referenced.\n- No external libraries are used.",
        "timestamp": 1720619063.632621
    },
    "D:\\kj-repos\\spec-tailwind-ui\\tailwind.config.css.js": {
        "summary": "Summary:\nThe code provided is a Tailwind CSS configuration file. It sets up the theme and color palette for the Tailwind CSS utility classes used in the project. The configuration includes defining the content files to be used, the color palette based on the `tailwindColors` import, and any additional theme extensions.\n\nReferences:\n- `tailwindColors` import from `./src/index.js`",
        "timestamp": 1720127848.2136302
    },
    "D:\\kj-repos\\spec-tailwind-ui\\vite.config.js": {
        "summary": "Summary:\nThe provided code is a Vite configuration file that sets up a React-based project. The configuration includes the following:\n\n1. Defines the Vite configuration using `defineConfig`.\n2. Includes the `@vitejs/plugin-react` plugin for React support.\n3. Specifies the CSS configuration, using PostCSS and a custom `postcss.config.js` file.\n4. Configures the build settings, including:\n   - Defining a library entry point at `src/index.js`.\n   - Specifying the library name as \"Speculated Tailwind UI\".\n   - Generating both ES and UMD module formats.\n   - Naming the output files as `spec-tailwind-ui.{format}.js`.\n   - Defining the external dependencies as `react` and `react-dom`, and configuring the global variables for these dependencies.\n\nReferences:\n- `defineConfig` from `vite`\n- `react` from `@vitejs/plugin-react`",
        "timestamp": 1720201309.762478
    }
}